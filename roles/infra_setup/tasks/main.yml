- name: Set default variables
  include_vars: "../vars/common_vars.yml"

- name: Set user variables
  include_vars: "../vars/{{ env }}.yml"

- name: Create a new ec2 VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpcCidrBlock }}"
    region: "{{ region }}"
    # enable dns support
    dns_support: yes
    # enable dns hostnames
    dns_hostnames: yes
    tenancy: default
    state: "{{ state }}"
  register: ec2_vpc_net_result
  when: network_flag == "yes"

- name: Create ec2 vpc internet gateway
    # create an internet gateway for the vpc
  ec2_vpc_igw:
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ region }}"
    state: "{{ state }}"
    tags:
      Name: "{{ igw_name }}"
  register: igw_result
  when: network_flag == "yes"

- name: Create ec2 vpc subnet
  # create the subnet for the vpc with a cidr block
  ec2_vpc_subnet:
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ region }}"
    az: "{{ zone }}"      # az is the availability zone
    state: "{{ state }}"
    cidr: "{{ subNetCidrBlock }}"
    # enable public ip
    map_public: yes
    resource_tags:
      Name: "{{ subnet_name }}"
  register: subnet_result
  when: network_flag == "yes"

- name: Create ec2 security group
  # create a security group for the vpc
  ec2_group:
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ region }}"
    state: "{{ state }}"
    name: "{{ security_group_name }}"
    description: "{{ security_group_name }}"
    tags:
      Name: "{{ security_group_name }}"
    rules:
      - proto: tcp
        ports:
          - 22
          - 80
          - 443
        cidr_ip: "{{ port22CidrBlock }}"
        rule_desc: allow all on port 22
  register: security_group_results
  when: network_flag == "yes"

- name: Create ec2 VPC Network access control list
  # create the access control list with ingress and egress ports
  ec2_vpc_nacl:
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ region }}"
    state: "{{ state }}"
    name: "{{ acl_name }}"
    subnets: ["{{ subnet_result.subnet.id }}"]
    tags:
      Name: "{{ acl_name }}"
      Description: "{{ acl_name }}"
    # ingress acl rules
    ingress:
      # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
      # allow ingress port 22
      - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
      # allow ingress port 80
      - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
      # allow icmp
      - [300, 'icmp', 'allow', "{{ destinationCidrBlock }}", 0, 8]
      # allow ingress ephemeral ports
      - [400, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]
      - [500, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 443, 443]
    # egress acl rules
    egress:
      # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
      # allow egres port 22
      - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
      # allow egres port 80
      - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
      # allow egress ephemeral ports
      - [300, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]
      - [400, 'all', 'allow', "0.0.0.0/0", null, null, null, null]
  register: acl_results
  when: network_flag == "yes"

- name: Create ec2 VPC public subnet route table
  # create route table and connect subnet to routes
  ec2_vpc_route_table:
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ region }}"
    state: "{{ state }}"
    tags:
      Name: "{{ route_table_name }}"
    subnets: ["{{ subnet_result.subnet.id }}"]
    # create routes
    routes:
      - dest: "{{ destinationCidrBlock }}"
        gateway_id: "{{ igw_result.gateway_id }}"
  register: public_route_table
  when: network_flag == "yes"

- name: Finding elastic IP address
  community.aws.ec2_eip_info:
    filters:
      tag:reserved_for: "{{ elastic_ip_tag_value }}"
  register: get_elastic_ip
  when: instance_flag == "yes"

# - name: create key pair using key_material obtained using 'file' lookup plugin
#   amazon.aws.ec2_key:
#     name: my_keypair
#     key_material: "{{ lookup('file', '~/awskey.pub') }}"

- name: Create ec2 instance
  ec2_instance:
    security_group: "{{ security_group_results.group_id }}"
    instance_type: "{{ instance_type }}"
    wait: yes
    region: "{{ region }}"
    image_id: "{{ image }}"
    user_data: "{{ user_data }}"
    key_name: "{{ keypair_name }}"
    state: started
    tags:
      app: jenkins
    exact_count: 1
    vpc_subnet_id: "{{ subnet_result.subnet.id }}"
  register: ec2_instance
  when: instance_flag == "yes"

- name: Allocate eip from pool - check if tag reserved_for exists and value is our hostname
  community.aws.ec2_eip:
    region: "{{ region }}"
    in_vpc: true
    reuse_existing_ip_allowed: true
    tag_name: "{{ elastic_ip_tag }}"
    tag_value: "{{ elastic_ip_tag_value }}"
    instance_id: "{{ ec2_instance.instances[0].instance_id }}"
  register: elastic_ip_result
  when: instance_flag == "yes"

- name: Update Route53 record
  community.aws.route53:
    state: present
    zone: "{{ route53_record_zone }}"
    record: "{{ route53_record }}"
    type: A
    ttl: 60
    value: "{{ get_elastic_ip.addresses[0].public_ip }}"
  when: instance_flag == "yes"

- name: Add instance public IP to host group
  add_host: hostname={{ get_elastic_ip.addresses[0].public_ip }} groups=ec2hosts
  